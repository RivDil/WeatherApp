(()=>{"use strict";var n={426:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(537),i=e.n(t),a=e(645),o=e.n(a)()(i());o.push([n.id,"*{\r\n    padding:0;\r\n    margin:0;\r\n    box-sizing: border-box;\r\n}\r\n#content{\r\n    height: 94%;\r\n\r\n}\r\n.main-country{\r\n    margin-top: 15px;\r\n    color:white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 1.5rem;\r\n    font-weight: lighter;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\nbody{\r\n    height: 100vh;\r\n    background-image: url('https://wallpaperaccess.com/full/2752599.jpg');\r\n    background-position: center center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\nmain{\r\n    height: 100%;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 5px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    color: white;\r\n  }\r\n\r\n#main-forecast-boxes {\r\n    display: flex;\r\n    overflow-x: scroll;\r\n    padding: 10px;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    width: 90%;\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    \r\n}\r\n#main-forecast-boxes div{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: 10px;\r\n}\r\n\r\n.main-country-info{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    color: white;\r\n    height: 70%;\r\n    font-size: 2rem;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-weight: light;\r\n}\r\n.main-forecast{\r\n\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    font-weight: lighter;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\nbutton{\r\n    display: flex;\r\n    margin: 0 auto;\r\n    background: none;\r\n    color: white;\r\n    padding: 8px;\r\n    cursor:pointer;\r\n    border: 1px solid rgba(236, 234, 234, 0.199);\r\n    border-radius: 15px;\r\n}\r\ninput{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    border-radius: 15px;\r\n    background: none;\r\n    color: white;\r\n}\r\n@media only screen and (min-width: 768px) {\r\n    #main-forecast-boxes {\r\n        display: flex;\r\n        padding: 10px;\r\n        align-items: center;\r\n        width: 100%;\r\n        max-width: 1000px;\r\n        margin: 0 auto;\r\n        font-size: 1rem;\r\n        overflow-x: hidden;\r\n        justify-content: space-between;\r\n    }  \r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,QAAQ;IACR,sBAAsB;AAC1B;AACA;IACI,WAAW;;AAEf;AACA;IACI,gBAAgB;IAChB,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,aAAa;IACb,WAAW;IACX,iBAAiB;IACjB,oBAAoB;IACpB,yCAAyC;AAC7C;AACA;IACI,aAAa;IACb,qEAAqE;IACrE,kCAAkC;IAClC,sBAAsB;IACtB,4BAA4B;AAChC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,cAAc;IACd,YAAY;EACd;;AAEF;IACI,aAAa;IACb,kBAAkB;IAClB,aAAa;IACb,2BAA2B;IAC3B,mBAAmB;IACnB,UAAU;IACV,iBAAiB;IACjB,cAAc;;AAElB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;;IAEvB,YAAY;IACZ,WAAW;IACX,eAAe;IACf,yCAAyC;IACzC,kBAAkB;AACtB;AACA;;IAEI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,oBAAoB;IACpB,yCAAyC;AAC7C;AACA;IACI,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,YAAY;IACZ,cAAc;IACd,4CAA4C;IAC5C,mBAAmB;AACvB;AACA;IACI,yCAAyC;IACzC,mBAAmB;IACnB,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI;QACI,aAAa;QACb,aAAa;QACb,mBAAmB;QACnB,WAAW;QACX,iBAAiB;QACjB,cAAc;QACd,eAAe;QACf,kBAAkB;QAClB,8BAA8B;IAClC;AACJ",sourcesContent:["*{\r\n    padding:0;\r\n    margin:0;\r\n    box-sizing: border-box;\r\n}\r\n#content{\r\n    height: 94%;\r\n\r\n}\r\n.main-country{\r\n    margin-top: 15px;\r\n    color:white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 1.5rem;\r\n    font-weight: lighter;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\nbody{\r\n    height: 100vh;\r\n    background-image: url('https://wallpaperaccess.com/full/2752599.jpg');\r\n    background-position: center center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\nmain{\r\n    height: 100%;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 5px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    color: white;\r\n  }\r\n\r\n#main-forecast-boxes {\r\n    display: flex;\r\n    overflow-x: scroll;\r\n    padding: 10px;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    width: 90%;\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    \r\n}\r\n#main-forecast-boxes div{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: 10px;\r\n}\r\n\r\n.main-country-info{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    color: white;\r\n    height: 70%;\r\n    font-size: 2rem;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-weight: light;\r\n}\r\n.main-forecast{\r\n\r\n    color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    font-weight: lighter;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n}\r\nbutton{\r\n    display: flex;\r\n    margin: 0 auto;\r\n    background: none;\r\n    color: white;\r\n    padding: 8px;\r\n    cursor:pointer;\r\n    border: 1px solid rgba(236, 234, 234, 0.199);\r\n    border-radius: 15px;\r\n}\r\ninput{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    border-radius: 15px;\r\n    background: none;\r\n    color: white;\r\n}\r\n@media only screen and (min-width: 768px) {\r\n    #main-forecast-boxes {\r\n        display: flex;\r\n        padding: 10px;\r\n        align-items: center;\r\n        width: 100%;\r\n        max-width: 1000px;\r\n        margin: 0 auto;\r\n        font-size: 1rem;\r\n        overflow-x: hidden;\r\n        justify-content: space-between;\r\n    }  \r\n}"],sourceRoot:""}]);const c=o},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(o[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);t&&o[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),r.push(l))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(i," */");return[r].concat([a]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},o=[],c=0;c<n.length;c++){var s=n[c],A=t.base?s[0]+t.base:s[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=e(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)r[u].references++,r[u].updater(p);else{var m=i(p,t);t.byIndex=c,r.splice(c,0,{identifier:d,updater:m,references:1})}o.push(d)}return o}function i(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,i){var a=t(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var c=e(a[o]);r[c].references--}for(var s=t(n,i),A=0;A<a.length;A++){var l=e(a[A]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=s}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,i&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var i=r[t];if(void 0!==i)return i.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),e.nc=void 0,(()=>{var n=e(379),r=e.n(n),t=e(795),i=e.n(t),a=e(569),o=e.n(a),c=e(565),s=e.n(c),A=e(216),l=e.n(A),d=e(589),u=e.n(d),p=e(426),m={};m.styleTagTransform=u(),m.setAttributes=s(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),r()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const f=(()=>{const n=document.getElementById("content");(()=>{const r=document.createElement("header");r.className="header",r.innerHTML="\n            <input id='countrySearch' placeholder='Search by city name'/>\n        ",n.appendChild(r)})(),(()=>{const r=document.createElement("main");r.innerHTML="\n        <section class=\"main-country\">\n        </section>\n        \n        <section class=\"main-country-info\">\n        </section>\n        <button id='changeUnits'>Display °F</button>\n        \n        <section class='main-forecast'>\n            <div>\n                <h4>Forecast by hours</h4>\n                <div id='main-forecast-boxes'>\n                </div>\n            </div>\n        </section>\n        ",n.appendChild(r)})()})(),h=(()=>{let n=document.getElementById("changeUnits"),r=!0;console.log(n),n.addEventListener("click",(()=>{r=!r,console.log(r);let e=document.getElementById("main-country-title").innerText;r?(n.textContent="Display °F",t(e,"metric"),i(e,"metric")):(n.textContent="Display °C",t(e,"imperial"),i(e,"imperial"))}));let e=document.getElementById("countrySearch");async function t(n,r){try{const e=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=c94b932deb6c53642941413f335e1d8c&units=${r}`),t=await e.json();console.log(t);const i=t.clouds.all;let a="";a=i<=10?"Sunny/Clear":i<=20?"Fair":i<=30?"Mostly sunny":i<=60?"Partly cloudy":i<=70?"Partly sunny":i<=90?"Mostly cloudy":"Overcast";const o=t.dt,c=t.timezone,s=new Date(1e3*(o+c)).getHours(),A=s>=7&&s<=19;console.log(A),document.querySelector(".main-country").innerHTML=`\n            <figure>${a}</figure>\n            <h3 id="main-country-title">${t.name}</h3>           \n        `,document.querySelector(".main-country-info").innerHTML=`\n        <h2 id="main-country-temperature">${Math.round(t.main.temp)}º</h2>\n            <p>Max.${Math.round(t.main.temp_max)}${"metric"===r?"ºC":"ºF"} Min.${Math.round(t.main.temp_min)}${"metric"===r?"ºC":"ºF"}</p>\n        `,document.querySelector("body").style.backgroundImage=`url(${A?"https://wallpaperaccess.com/full/2752599.jpg":"https://images.hdqwalls.com/download/moon-minimal-art-np-1920x1080.jpg"})`}catch(n){console.error(n)}}async function i(n,r){let e=document.getElementById("main-forecast-boxes");e.innerHTML="";try{const t=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&appid=c94b932deb6c53642941413f335e1d8c&units=${r}`),i=await t.json();for(let n=0;n<10;n++){const t=i.list[n].clouds.all;let a="";a=t<=10?"Sunny/Clear":t<=20?"Fair":t<=30?"Mostly sunny":t<=60?"Partly cloudy":t<=70?"Partly sunny":t<=90?"Mostly cloudy":"Overcast";const o=document.createElement("div"),c=i.list[n].dt,s=i.city.timezone,A=new Date(1e3*(c+s)).getHours(),l=A<10?`0${A}:00`:`${A}:00`,d=Math.round(i.list[n].main.temp);o.innerHTML=`<h5>${l}</h5><figure>${a}</figure><h5>${d} ${"metric"===r?"ºC":"ºF"}</h5>`,e.appendChild(o)}}catch(n){console.error(n)}}console.log(e),e.addEventListener("keyup",(function(n){13==n.keyCode&&function(){let n=e.value;t(n,r?"metric":"imperial"),i(n,r?"metric":"imperial"),e.value=""}()})),(async()=>{await t("Maracay","metric"),await i("Maracay","metric")})()})();f(),h()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,